# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  nestjs:
    container_name: nestjs
    build:
      context: .
      dockerfile: dev.dockerfile
    ports:
      - 3000:3000
    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker-compose up`.
    depends_on:
      postgress-db:
        condition: service_healthy
  postgress-db:
    image: postgres:latest
    container_name: postgress-db
    restart: always
    environment:
      POSTGRES_DB: template
      POSTGRES_USER: templateUser
      POSTGRES_PASSWORD: templateUserPass
    ports:
      - 5432:5432

    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d template']
      interval: 5s
      timeout: 10s
      retries: 10

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      postgress-db:
        condition: service_healthy
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

